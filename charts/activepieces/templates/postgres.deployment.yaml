apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{ .Release.Name }}-postgres'
  labels:
    katenary.io/component: postgres
    katenary.io/project: '{{ .Chart.Name }}'
    katenary.io/release: '{{ .Release.Name }}'
  annotations:
    katenary.io/docker-compose-sha1: 403bf1804b7c96915dbd282860506a6255f9b5c5
    katenary.io/version: 2.0.0-beta2
spec:
  replicas: 1
  selector:
    matchLabels:
      katenary.io/component: postgres
      katenary.io/release: '{{ .Release.Name }}'
  template:
    metadata:
      labels:
        katenary.io/component: postgres
        katenary.io/release: '{{ .Release.Name }}'
    spec:
      containers:
        - name: postgres
          image: '{{ .Values.postgres.repository.image }}{{ if ne .Values.postgres.repository.tag "" }}:{{ .Values.postgres.repository.tag }}{{ end }}'
          ports:
            - name: postgres
              containerPort: 5432
          env:
            - name: POSTGRES_PASSWORD
              value: '{{ tpl .Values.postgres.environment.POSTGRES_PASSWORD . }}'
            - name: POSTGRES_DB
              value: '{{ tpl .Values.postgres.environment.POSTGRES_DB . }}'
            - name: POSTGRES_USER
              value: '{{ tpl .Values.postgres.environment.POSTGRES_USER . }}'
            - name: PGDATA
              value: /var/lib/postgresql/data/pgdata
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresdatadev
      volumes:
        - name: postgresdatadev
          {{- if  .Values.postgres.persistence.postgresdatadev.enabled }}
          persistentVolumeClaim:
            claimName: '{{ .Release.Name }}-postgresdatadev'
          {{ else }}
          emptyDir: {}
          {{- end }}

